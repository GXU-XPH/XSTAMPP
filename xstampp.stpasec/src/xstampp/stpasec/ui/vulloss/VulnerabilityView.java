/*******************************************************************************
 * Copyright (c) 2013, 2017 A-STPA Stupro Team Uni Stuttgart (Lukas Balzer, Adam
 * Grahovac, Jarkko Heidenwag, Benedikt Markt, Jaqueline Patzek, Sebastian
 * Sieber, Fabian Toth, Patrick Wickenh√§user, Aliaksei Babkovich, Aleksander
 * Zotov).
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 *******************************************************************************/

package xstampp.stpasec.ui.vulloss;

import java.util.EnumSet;
import java.util.List;
import java.util.UUID;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IMenuListener;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.ColumnViewer;
import org.eclipse.jface.viewers.ColumnWeightData;
import org.eclipse.jface.viewers.EditingSupport;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.viewers.TextCellEditor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Text;

import messages.Messages;
import xstampp.astpa.model.hazacc.ATableModel;
import xstampp.astpa.model.interfaces.IHazardViewDataModel;
import xstampp.astpa.model.interfaces.ITableModel;
import xstampp.astpa.ui.ATableFilter;
import xstampp.astpa.ui.CommonTableView;
import xstampp.model.ObserverValue;
import xstampp.stpapriv.model.vulloss.Loss;
import xstampp.stpapriv.model.vulloss.Vulnerability;
import xstampp.stpasec.messages.SecMessages;
import xstampp.ui.common.ProjectManager;

/**
 * @author Jarkko Heidenwag
 * 
 */
public class VulnerabilityView extends CommonTableView<IHazardViewDataModel> {

	/**
	 * @author Jarkko Heidenwag
	 * 
	 */
	public static final String ID = "stpasec.steps.step1_3"; //$NON-NLS-1$


  public VulnerabilityView() {
	    super(EnumSet.of(TableStyle.RESTRICTED,TableStyle.WITH_SEVERITY));
	    setUpdateValues(EnumSet.of(ObserverValue.HAZARD,ObserverValue.SEVERITY));

  }

	/**
	 * Create contents of the view part.
	 * 
	 * @author Jarkko Heidenwag
	 * @param parent
	 *            The parent composite
	 */
	@Override
	public void createPartControl(Composite parent) {
    this.setDataModelInterface(
        ProjectManager.getContainerInstance().getDataModel(this.getProjectID()));

		this.createCommonTableView(parent, SecMessages.Vulnerabilities);

		this.getFilterTextField().addKeyListener(new KeyAdapter() {

			@Override
			public void keyReleased(KeyEvent ke) {
				VulnerabilityView.this.getFilter().setSearchText(VulnerabilityView.this.getFilterTextField().getText());
				VulnerabilityView.this.refreshView();
			}
		});

		this.setFilter(new ATableFilter());
		this.getTableViewer().addFilter(this.getFilter());

		

		Listener addHazardListener = new Listener() {

			@Override
			public void handleEvent(Event event) {
				if ((event.type == SWT.KeyDown) && (event.keyCode != 'n')) {
					return;
				}
				VulnerabilityView.this.getFilter().setSearchText(""); //$NON-NLS-1$
				VulnerabilityView.this.getFilterTextField().setText(""); //$NON-NLS-1$
//				HazardsView.this.refreshView();
				VulnerabilityView.this.getDataInterface().addHazard("", "");
				int newID = getTableViewer().getTable().getItemCount()-1;
				VulnerabilityView.this.getTableViewer().setSelection(
            new StructuredSelection(VulnerabilityView.this.getTableViewer().getElementAt(newID)), true);
				VulnerabilityView.this.getTitleColumn().getViewer()
            .editElement(VulnerabilityView.this.getTableViewer().getElementAt(newID), 1);
			}
		};

		this.getAddNewItemButton()
				.addListener(SWT.Selection, addHazardListener);

		this.getTableViewer().getTable()
				.addListener(SWT.KeyDown, addHazardListener);

		// Listener for editing a title by pressing return
		Listener returnListener = new Listener() {

			@Override
			public void handleEvent(Event event) {
        if ((event.type == SWT.KeyDown) && (event.keyCode == SWT.CR)
            && (!VulnerabilityView.this.getTableViewer().getSelection().isEmpty())) {
          int indexFirstSelected = VulnerabilityView.this.getTableViewer().getTable()
              .getSelectionIndices()[0];
          VulnerabilityView.this.getTitleColumn().getViewer()
              .editElement(VulnerabilityView.this.getTableViewer().getElementAt(indexFirstSelected), 1);
				}
			}
		};

    this.getTableViewer().getTable().addListener(SWT.KeyDown, returnListener);

		// Listener for the Description
		this.getDescriptionWidget().addModifyListener(new ModifyListener() {

			@Override
			public void modifyText(ModifyEvent e) {
					Text text = (Text) e.widget;
					String description = text.getText();
        UUID id = getCurrentSelection();
        VulnerabilityView.this.getDataInterface().setHazardDescription(id, description);
			}
		});

    EditingSupport titleEditingSupport = new HazEditingSupport(VulnerabilityView.this.getTableViewer());
		this.getTitleColumn().setEditingSupport(titleEditingSupport);

		TableViewerColumn linksColumn;

		linksColumn = new TableViewerColumn(VulnerabilityView.this.getTableViewer(),
				SWT.NONE);
		linksColumn.getColumn().setText(Messages.Links);
		linksColumn.setLabelProvider(new ColumnLabelProvider() {

			@Override
			public String getText(Object element) {
				String linkString = ""; //$NON-NLS-1$
				List<ITableModel> links = VulnerabilityView.this.getDataInterface()
						.getLinkedAccidents(((Vulnerability) element).getId());
				if (!(links == null)) {
					for (int i = 0; i < links.size(); i++) {
						linkString += ((Loss)links.get(i)).getIdString();
						if (i < (links.size() - 1)) {
							linkString += ", "; //$NON-NLS-1$
						}
					}
				}
				return linkString;
			}
		});

		this.getTableColumnLayout().setColumnData(linksColumn.getColumn(),
        new ColumnWeightData(10, 50, false));

		// KeyListener for deleting hazards by selecting them and pressing the
		// delete key
		VulnerabilityView.this.getTableViewer().getControl()
				.addKeyListener(new KeyAdapter() {

					@Override
					public void keyReleased(final KeyEvent e) {
        if ((e.keyCode == SWT.DEL) || ((e.stateMask == SWT.COMMAND) && (e.keyCode == SWT.BS))) {
          IStructuredSelection selection = (IStructuredSelection) VulnerabilityView.this.getTableViewer()
              .getSelection();
							if (selection.isEmpty()) {
								return;
							}
							VulnerabilityView.this.deleteItems();
						}
					}
				});

		// Adding a right click context menu and the option to delete an entry
		// this way
		MenuManager menuMgr = new MenuManager();
		Menu menu = menuMgr.createContextMenu(VulnerabilityView.this.getTableViewer()
				.getControl());
		menuMgr.addMenuListener(new IMenuListener() {

			@Override
			public void menuAboutToShow(IMenuManager manager) {
				if (VulnerabilityView.this.getTableViewer().getSelection().isEmpty()) {
					return;
				}
				if (VulnerabilityView.this.getTableViewer().getSelection() instanceof IStructuredSelection) {
					Action deleteHazard = new Action(SecMessages.DeleteVulnerabilities) {

						@Override
						public void run() {
							VulnerabilityView.this.deleteItems();
						}
					};
					manager.add(deleteHazard);
				}
			}

		});

		menuMgr.setRemoveAllWhenShown(true);
		VulnerabilityView.this.getTableViewer().getControl().setMenu(menu);

		this.updateTable();

	}

	@Override
	protected void deleteEntry(ATableModel model) {
    resetCurrentSelection();
    this.getDataInterface().removeHazard(model.getId());
	}
	
  private class HazEditingSupport extends AbstractEditingSupport {

		/**
		 * 
		 * @author Jarkko Heidenwag
		 * 
		 * @param viewer
		 *            the ColumnViewer
		 */
		public HazEditingSupport(ColumnViewer viewer) {
			super(viewer);
		}

		@Override
		protected CellEditor getCellEditor(Object element) {
			return new TextCellEditor(VulnerabilityView.this.getTableViewer()
					.getTable());
		}

		@Override
		protected Object getValue(Object element) {
      return getValue(((Vulnerability) element).getTitle());
		}

		@Override
		protected void setValue(Object element, Object value) {
			VulnerabilityView.this.getDataInterface().setHazardTitle(((Vulnerability) element).getId(),
						String.valueOf(value));
			}
					}

	/**
	 * @author Jarkko Heidenwag
	 * 
	 */
	@Override
	public void updateTable() {
		VulnerabilityView.this.getTableViewer().setInput(this.getDataInterface().getAllHazards());
	}

	@Override
	public String getId() {
		return VulnerabilityView.ID;
	}

	@Override
	public String getTitle() {
		return SecMessages.Vulnerabilities;
	}

	@Override
	public void dispose() {
		this.getDataInterface().deleteObserver(this);
		super.dispose();
	}

	  @Override
	  protected void moveEntry(UUID id, boolean moveUp) {
	    getDataInterface().moveEntry(false, moveUp, id, ObserverValue.HAZARD);
	  }
}
